{
	"type": "object",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"description": "JSON schema generated with JSONBuddy https://www.json-buddy.com",
	"properties": {
		"bodybuilder": {
			"type": "object",
			"properties": {
				"age": {
					"type": "integer",
					"description":"age of person (used to adjust physiology default values),units:years",
					"minimum":5,
					"maximum":100  
				},
				"body_fat": {
					"type": "number",
					"description":"body fat as a fraction of total body mass",
					"minimum": 0.01,
					"maximum": 0.90 
				},
				"sex": {
					"type": "string",
					"description":"Sex, male or female"
				},
				"height": {
					"type": "number",
					"description":"height of person (used to adjust physiology default values),units:meters",
					"minimum":1,
					"maximum":3  
				},
				"weight": {
					"type": "number",
					"description":"weight of person (used to adjust physiology default values),units:kg",
					"minimum":25,
					"maximum":200  
				}
			}
		},
		"description": {
			"type": "string",
			"description":"Detailed description of simulation" 
		},
		"name": {
			"type": "string",
			"description":"Name of simulation" 
			
		},
		"options": {
			"type": "object",
			"description":"simulation options",
			"properties": {
				"csvOutput": {
					"type": "boolean",
					"description":"If true, generate standard csv output files"
				},
				"sensation_adaptation": {
					"type": "boolean",
					"description":"If true, use sensation adaptation model"
				},
				"sensation_coredTdt": {
					"type": "boolean",
					"description":"If true, use coredTdt in sensation model"
				},
				"comfort_model": {
					"type": "boolean",
					"description":"If true, run comfort model only using skin temperature input"
				},
				"comfort_setpoint_input": {
					"type": "boolean",
					"description":"If true, read segment comfort setpoints from input rather than calculate them"
				},
				"passive_comfort_setpoints": {
					"type": "boolean",
					"description":"If true, disable regulatory model when calulating comfort setpoints"
				},
				"transient_comfort_model": {
					"type": "boolean",
					"description":"If true, use comfort model for transient conditions"
				},
				"user_control_comfort_model": {
					"type": "boolean",
					"description":"If true, use comfort model for user controled conditions"
				}
			}
		},
		"output_freq": {
			"type": "integer",
			"description":"Frequency of results in output, units:seconds"
		},
		"phases": {
			"type": "array",
			"description":"array of conditions to be simulated",
			"items": {
				"oneOf": [
					{
						"type": "object",
						"properties": {
							"clo_ensemble_name": {
								"type": "string",
								"description":"Name of clothing ensemble for this condition"
							},
							"default_data": {
								"type": "object",
								"description":"conditions for all and all segments not explicitly included in this condition",
								"properties": {
									"mrt": {
										"type": "number",
										"description":"Mean radiant temperature for the body segment, units:degrees C"
									},
									"rh": {
										"type": "number",
										"description":"Relative humidity for the body segment, units:fraction"
									},
									"solar": {
										"type": "number",
										"description":"Solar flux for the body segment, units:W/m2"
									},
									"ta": {
										"type": "number",
										"description":"Dry bulb air for the body segment, units:degrees C"
									},
									"v": {
										"type": "number",
										"description":"Air velocity for the body segment, units:m/s"
									}
								}
							},
							"end_time": {
								"type": "integer",
								"description":"end time for this condition, units: time_units"
							},
							"met": {
								"type": "number",
								"description":"Metabolic rate, units:met"
							},
							"met_activity_name": {
								"type": "string",
								"description":"Metabolic activity library reference [currently not implemented]"
							},
							"ramp": {
								"type": "boolean",
								"description":"if true, conditions will ramp linearly from previous condition"
							},
							"start_time": {
								"type": "integer",
								"description":"start time for this condition, units: time_units"
							},
							"time_units": {
								"type": "string",
								"description":"units for start_time and end_time. defaults to seconds",
								"anyOf": [
									{"const":"hours"},
									{"const":"minutes"},
									{"const":"seconds"}
								]
							},
							
							"segment_data": {
								"type": "object",
								"properties": {
									"Head": {
										"type": "object",
										"properties": {
											"mrt": {
												"type": "number"
											},
											"rh": {
												"type": "number"
											},
											"solar": {
												"type": "integer"
											},
											"ta": {
												"type": "integer"
											},
											"v": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				]
			}
		}
	}
}